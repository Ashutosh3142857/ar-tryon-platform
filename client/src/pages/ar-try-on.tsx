import { useState, useCallback, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Camera, Zap, Grid3X3, Settings } from 'lucide-react';
import { CameraFeed } from '@/components/camera-feed';
import { ProductOverlay } from '@/components/product-overlay';
import { CategoryTabs } from '@/components/category-tabs';
import { ProductCarousel } from '@/components/product-carousel';
import { PositioningControls } from '@/components/positioning-controls';
import { ARGrid } from '@/components/ar-grid';
import { useFaceDetection } from '@/hooks/use-face-detection';
import { useToast } from '@/hooks/use-toast';
import { Product, ProductCategory, AROverlay, ARSession } from '@/types/ar-types';
import { useCamera } from '@/hooks/use-camera';
import { useParams } from 'wouter';
import { useQuery } from '@tanstack/react-query';

export default function ARTryOnPage() {
  const params = useParams();
  const { toast } = useToast();
  const [videoElement, setVideoElement] = useState<HTMLVideoElement | null>(null);
  const [session, setSession] = useState<ARSession>({
    activeCategory: 'jewelry',
    selectedProduct: null,
    overlay: null,
    isRecording: false,
    showGrid: false,
    showControls: false,
    faceLandmarks: null
  });

  const { capturePhoto } = useCamera();
  const { faceLandmarks, isInitialized, error } = useFaceDetection(
    videoElement, 
    !!videoElement
  );

  // Get tenant slug from URL params
  const tenantSlug = params.tenantSlug || 'demo'; // Default to demo tenant for backward compatibility

  // Load products from tenant-specific API
  const { data: products = [], isLoading: productsLoading } = useQuery({
    queryKey: [`/api/${tenantSlug}/products`],
    enabled: !!tenantSlug,
  });

  // Load products by category
  const { data: categoryProducts = [], isLoading: categoryLoading } = useQuery({
    queryKey: [`/api/${tenantSlug}/products/category/${session.activeCategory}`],
    enabled: !!tenantSlug && !!session.activeCategory,
  });

  // Update session with face landmarks
  useEffect(() => {
    setSession(prev => ({ ...prev, faceLandmarks }));
  }, [faceLandmarks]);

  const handleVideoRef = useCallback((video: HTMLVideoElement | null) => {
    setVideoElement(video);
  }, []);

  const handleCategoryChange = useCallback((category: ProductCategory) => {
    setSession(prev => ({
      ...prev,
      activeCategory: category,
      selectedProduct: null,
      overlay: null,
      showControls: false
    }));
  }, []);

  const handleProductSelect = useCallback((product: Product) => {
    setSession(prev => ({
      ...prev,
      selectedProduct: product,
      showControls: true,
      overlay: null // Will be auto-generated by ProductOverlay
    }));
  }, []);

  const handleOverlayChange = useCallback((overlay: AROverlay | null) => {
    setSession(prev => ({ ...prev, overlay }));
  }, []);

  const handleOverlayUpdate = useCallback((overlay: AROverlay) => {
    setSession(prev => ({ ...prev, overlay }));
  }, []);

  const handleCapture = useCallback(() => {
    const photoData = capturePhoto();
    if (photoData) {
      // Create download link
      const link = document.createElement('a');
      link.href = photoData;
      link.download = `ar-trykon-${Date.now()}.jpg`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      toast({
        title: "Photo Captured!",
        description: "Your AR try-on photo has been saved.",
      });
    } else {
      toast({
        title: "Capture Failed",
        description: "Could not capture photo. Please try again.",
        variant: "destructive"
      });
    }
  }, [capturePhoto, toast]);

  const toggleGrid = useCallback(() => {
    setSession(prev => ({ ...prev, showGrid: !prev.showGrid }));
  }, []);

  const goBack = useCallback(() => {
    // Navigate back or close AR session
    window.history.back();
  }, []);

  return (
    <div className="relative w-full h-screen bg-background overflow-hidden" data-testid="ar-try-on-page">
      {/* Camera Feed Background */}
      <CameraFeed 
        onVideoRef={handleVideoRef}
        className="absolute inset-0"
      />

      {/* AR Grid Overlay */}
      <ARGrid visible={session.showGrid} />

      {/* Product Overlay */}
      <div className="absolute inset-0 z-10 pointer-events-none">
        <ProductOverlay
          product={session.selectedProduct}
          faceLandmarks={faceLandmarks}
          overlay={session.overlay}
          onOverlayChange={handleOverlayChange}
          videoElement={videoElement}
        />
      </div>

      {/* Top Status Bar */}
      <div className="absolute top-0 left-0 right-0 z-50 p-4">
        <div className="flex items-center justify-between">
          <Button 
            className="floating-control rounded-full p-3"
            onClick={goBack}
            data-testid="button-go-back"
          >
            <ArrowLeft className="w-5 h-5 text-white" />
          </Button>
          
          <div className="floating-control rounded-full px-4 py-2">
            <span className="text-white text-sm font-medium">AR Try-On</span>
          </div>
          
          <div className="flex gap-2">
            <Button 
              className="floating-control rounded-full p-3"
              onClick={toggleGrid}
              data-testid="button-toggle-grid"
            >
              <Grid3X3 className={`w-5 h-5 ${session.showGrid ? 'text-primary' : 'text-white'}`} />
            </Button>
            
            <Button 
              className="floating-control rounded-full p-3"
              data-testid="button-flash"
            >
              <Zap className="w-5 h-5 text-white" />
            </Button>
          </div>
        </div>
      </div>

      {/* Positioning Controls */}
      <PositioningControls
        overlay={session.overlay}
        onOverlayUpdate={handleOverlayUpdate}
        visible={session.showControls}
      />

      {/* Capture Button */}
      <div className="absolute bottom-32 left-1/2 transform -translate-x-1/2 z-50">
        <Button
          className="capture-button bg-primary rounded-full p-6 text-white shadow-lg hover:shadow-xl transition-all"
          onClick={handleCapture}
          data-testid="button-capture"
        >
          <Camera className="w-6 h-6" />
        </Button>
      </div>

      {/* Category Tabs */}
      <div className="absolute bottom-20 left-0 right-0 z-40 p-4">
        <CategoryTabs
          activeCategory={session.activeCategory}
          onCategoryChange={handleCategoryChange}
        />
      </div>

      {/* Product Carousel */}
      <div className="absolute bottom-4 left-0 right-0 z-30 slide-up">
        <ProductCarousel
          activeCategory={session.activeCategory}
          selectedProduct={session.selectedProduct}
          onProductSelect={handleProductSelect}
        />
      </div>

      {/* Loading/Error States */}
      {!isInitialized && videoElement && (
        <div className="absolute inset-0 z-60 bg-background/90 backdrop-blur-sm flex items-center justify-center" data-testid="face-detection-loading">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-4 border-primary border-t-transparent mx-auto mb-4"></div>
            <p className="text-foreground/80 text-lg font-medium">Initializing Face Detection...</p>
            <p className="text-muted-foreground text-sm mt-2">Loading AI models</p>
          </div>
        </div>
      )}

      {error && (
        <div className="absolute top-20 left-4 right-4 z-60">
          <div className="floating-control rounded-lg p-4 bg-destructive/90">
            <p className="text-white text-sm font-medium">Face Detection Error</p>
            <p className="text-white/80 text-xs mt-1">{error}</p>
          </div>
        </div>
      )}
    </div>
  );
}
